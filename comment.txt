1. Fluid Layout(계산법이 추가된 코드가 포함된 이미지로 바꿔주소!!)

- 첫 섹션을 통해서 얘기한 바와같이 실제 반응형 웹 디자인 구조는 과거부터 현재까지 저희도 모르게 꾸준히 사용되고 있는 부분입니다.

현재도 가장 많이 쓰이고 있는 일반적인 레이아웃 구조이며, 컨텐츠 폭(컨텐츠 크기 / 컨텐츠 전체 크기)을 유동적으로 할당해 대응하는 방법입니다.

** 프론트 엔지니어가 계산기를 잘써야 하는 이유이기도 합니다. ^^


2. Adaptive Layout

- 자바스크립트를 이용하여, 화면 사이즈를 캐취해 각 화면에 대한 스타일들을 유동적으로 변경하는 방법입니다.


3. Viewport란?

- Viewport는 DOM 상 최상위 요소인 HTML 요소를 제어하는 또 하나의 요소입니다.

뷰포트는 실제 반응형 웹을 구현할때 가장 중요한 부분이지만, 보통 제대로 이해하고 있지 못한 부분이기도 합니다.

저 또한, 이 섹션을 준비하기 전까진 제대로 이해하지 못한 부분이기도 했으며, 그 이유는 센차와 같은 모바일 프레임웍 사용 시 신경 쓰지 않아도 되는 부분이기 때문입니다.


4. visual/layout

- visual viewport: 사용자가 보고있는 가시적인 화면 영역.

layout viewport: visual viewport 영역을 제외한 나머지 영역(사용자 시선에서 가려진 영역)

즉, visual viewport는 화면 확/축소 시 변경되는 값이며(이유: 확대 시 화면 상 보여진 픽셀이 점점 쥴어든다) layout viewport는 절대 변하지 않는 값이다.


5. 만약 Viewport가 적용되지 않았다면?(그냥 확 축소된 화면으로만 바꿔주오)

- 만약 Viewport가 적용되지 않았을 경우 실제 디바이스를 통해 사용자가 보는 영역은 layout viewport 영역을 완전히 축소한 화면이다.

결국 컨텐츠 상의 폰트와 이미지는 해당 디바이스 사이즈만큼 줄어들어 사용자 경험을 해치게 된다.


6. Meta Tag(코드 이지로 변경)

- Viewport를 적용하는 방법은 보시는 바와같이 아주 간단하며, 각 속성들에 의해 디바이스 화면이 정의됩니다.

- width/height: 디바이스의 viewport 폭 정의
- init: 최초 확대 비율 정의
- min: 최소 확소 비율 정의
- max: 최대 확대 배율 정의

7. “user-scalable” 속성 값이 "yes" 인데 zoom in/out 불가능?(코드 이지로 변경)

- 이전 설명(태그)과 같이 적용하면 확/축소가 가능해야하지만, 실제 디바이스에서는 그렇게 적용되지 않습니다.

이를 적용하기 위해선 아래 코드와 같이 maxnum-scale 속성을 제거해야합니다.

8. Media Query란?

- CSS를 이용해 처리하는 방법이다.

이 내용만 보면 아주 쉬워 보이지만 실제 처리시에는 그 내부에 들어가는 스타일들을 분기시키는 것이 훨씬 시간도 많이 걸리고 힘든 부분입니다

9. css media query

- 속성 설명

10. link tag

- 속성 설명


11.  respond.js

- 국내 환경 상 구 IE (6 ~ 8) 브라우저 버전이라 하더라도 쉽게 버릴수 있는 환경은 아닙니다.
- 그런 환경을 대응하기 위해 respondJS 를 사용해 실제 지원하지 않는 media query에 대응합니다.

12.  css3-mediaquerysJS

- respondJS와 마찬가지로 구 모바일 브라우저의 @media query 지원을 위해 사용됩니다.

13. 결론

- 처음에도 말씀드렸다시피 반응형 웹을 구현하기 위해선 가장 선행해야하는 작업이며, 반드시 완벽히 이해하고 있어야 하는 부분이기도 합니다.
그러니 꼭~~~ 이해하자!!!







